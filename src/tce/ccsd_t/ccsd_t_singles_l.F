      SUBROUTINE ccsd_t_singles_l(a_i0,
     &                            d_t1,d_v2,
     &                            k_t1_offset,k_v2_offset,
     &                            t_h1b,t_h2b,t_h3b,t_p4b,t_p5b,t_p6b,
     &                            toggle)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vt + = 1 * P( 9 ) * t ( p4 h1 )_t * v ( p5 p6 h2 h3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      DOUBLE PRECISION a_i0(*)
      INTEGER d_t1, d_v2
      INTEGER k_t1_offset, k_v2_offset
      INTEGER t_p4b, t_p5b, t_p6b, t_h1b, t_h2b, t_h3b
      INTEGER toggle
      if (toggle.eq.2) then 
          CALL ccsd_t_singles_l_1(d_t1,k_t1_offset,
     &                            d_v2,k_v2_offset,
     &                            a_i0,
     &                            t_p4b,t_p5b,t_p6b,
     &                            t_h1b,t_h2b,t_h3b)
      endif
      RETURN
      END
      SUBROUTINE ccsd_t_singles_l_1(d_a,k_a_offset,
     &                              d_b,k_b_offset,
     &                              a_c,
     &                              t_p4b,t_p5b,t_p6b,
     &                              t_h1b,t_h2b,t_h3b)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vt + = 1 * P( 9 ) * t ( p4 h1 )_t * v ( p5 p6 h2 h3 )_v
c
c elimination of the transpositions (kowalski,august,2009)
c
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p4b
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
c -- peta-exa --
      INTEGER a3(9,6)
      INTEGER ia6,ja6
c --------------
      DOUBLE PRECISION a_c(*)
      LOGICAL skipped
#if defined(TCE_OPENACC) && defined(USE_F90_ALLOCATABLE)
      double precision, allocatable :: d_v2sub(:), d_t1sub(:)
      double precision, allocatable :: d_scratch(:)
      integer t1size, v2size, alloc_error
#endif      

        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h1b
        a3(2,6)=t_h3b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h3b
        a3(3,5)=t_h1b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p4b
        a3(4,3)=t_p6b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p4b
        a3(5,3)=t_p6b
        a3(5,4)=t_h2b
        a3(5,5)=t_h1b
        a3(5,6)=t_h3b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p4b
        a3(6,3)=t_p6b
        a3(6,4)=t_h3b
        a3(6,5)=t_h1b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p6b
        a3(7,2)=t_p4b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p6b
        a3(8,2)=t_p4b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h1b
        a3(8,6)=t_h3b
c
        a3(9,1)=t_p6b
        a3(9,2)=t_p4b
        a3(9,3)=t_p5b
        a3(9,4)=t_h3b
        a3(9,5)=t_h1b
        a3(9,6)=t_h2b
c
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo 
         end if
        enddo 

#if defined(TCE_OPENACC) && defined(USE_F90_ALLOCATABLE)

      call acc_ccsd_t_v2t1lgth(t1size,v2size)

      allocate(d_t1sub(1:t1size), stat=alloc_error)
      if (alloc_error.ne.0) then
        call errquit('ccsd_t_doubles_t: MA error d_t1sub',0,MA_ERR)
      endif
      allocate(d_v2sub(1:v2size), stat=alloc_error)
      if (alloc_error.ne.0) then
        call errquit('ccsd_t_doubles_t: MA error d_v2sub',0,MA_ERR)
      endif
      allocate(d_scratch(1:t1size), stat=alloc_error)
      if (alloc_error.ne.0) then
        call errquit('ccsd_t_doubles_t: MA error d_scratch',0,MA_ERR)
      endif

!$acc  enter data copyin(d_t1sub(1:t1size))
!$acc& copyin(d_v2sub(1:v2size))
#endif
c
      do ia6=1,9
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
      if((p5b.le.p6b).and.(h2b.le.h3b).and.(p4b.ne.0)) then
      skipped = .false.
      IF (.not.skipped) THEN
      IF ((.not.restricted).or.
     &     (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+
     &      int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+
     &      int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+
     &    int_mb(k_spin+p6b-1).eq. 
     &    int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &    int_mb(k_spin+h3b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),
     &    ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),
     &    ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+h3b-1)))))) 
     &   .eq.ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1) * 
     &       int_mb(k_range+p6b-1) * int_mb(k_range+h1b-1) * 
     &       int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      IF (int_mb(k_spin+p4b-1).eq.int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h1b-1))
     &               .eq.irrep_t) THEN
      CALL TCE_RESTRICTED_2(p4b,h1b,p4b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p5b,p6b,h2b,h3b,p5b_2,p6b_2,h2b_2,h3b_2)
      dim_common = 1
      dima_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * 
     &            int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0).and.(dimb .gt. 0)) THEN

#if defined(TCE_OPENACC) && defined(USE_F90_ALLOCATABLE)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     &                       int_mb(k_a_offset),
     &                       (h1b_1-1+noab*(p4b_1-noab-1)))
      CALL TCE_SORT_2(dbl_mb(k_a),d_t1sub,
     &                int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),
     &                2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',4,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,d_v2sub,dimb,int_mb(k_b_offset),
     &                    (h3b_2-1+(noab+nvab)*(h2b_2-1+(noab+nvab)*
     &                    (p6b_2-1+(noab+nvab)*(p5b_2-1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,d_v2sub,dimb,
     &                      int_mb(k_b_offset),(h3b_2-1+(noab+nvab)*
     &                      (h2b_2-1+(noab+nvab)*(p6b_2-1+(noab+nvab)*
     &                      (p5b_2-1)))),h3b_2,h2b_2,p6b_2,p5b_2)
      end if

!$acc update device(d_t1sub(1:t1size))      
!$acc update device(d_v2sub(1:v2size))      

      IF ((t_p4b.eq.p4b).and.(t_p5b.eq.p5b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h1b).and.(t_h2b.eq.h2b).and.(t_h3b.eq.h3b)) THEN
      call acc_sd_t_s1_1(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p4b).and.(t_p5b.eq.p5b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h1b).and.(t_h3b.eq.h3b)) THEN
      call acc_sd_t_s1_2(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p4b).and.(t_p5b.eq.p5b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h3b).and.(t_h3b.eq.h1b)) THEN
      call acc_sd_t_s1_3(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p4b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h1b).and.(t_h2b.eq.h2b).and.(t_h3b.eq.h3b)) THEN
      call acc_sd_t_s1_4(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p4b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h1b).and.(t_h3b.eq.h3b)) THEN
      call acc_sd_t_s1_5(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p4b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h3b).and.(t_h3b.eq.h1b)) THEN
      call acc_sd_t_s1_6(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p6b).and.(t_p6b.eq.p4b)
     &.and.(t_h1b.eq.h1b).and.(t_h2b.eq.h2b).and.(t_h3b.eq.h3b)) THEN
      call acc_sd_t_s1_7(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p6b).and.(t_p6b.eq.p4b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h1b).and.(t_h3b.eq.h3b)) THEN
      call acc_sd_t_s1_8(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p6b).and.(t_p6b.eq.p4b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h3b).and.(t_h3b.eq.h1b)) THEN
      call acc_sd_t_s1_9(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,d_t1sub,d_v2sub)

!$acc update self(d_t1sub(1:t1size))      
!$acc update self(d_v2sub(1:v2size))      
#else
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     &                       int_mb(k_a_offset),
     &                       (h1b_1-1+noab*(p4b_1-noab-1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),
     &                int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),
     &                2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) 
     &           CALL ERRQUIT('ccsd_t_singles_1',4,MA_ERR)
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b_sort),dimb,int_mb(k_b_offset),
     &                    (h3b_2-1+(noab+nvab)*(h2b_2-1+(noab+nvab)*
     &                    (p6b_2-1+(noab+nvab)*(p5b_2-1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b_sort),dimb,
     &                      int_mb(k_b_offset),(h3b_2-1+(noab+nvab)*
     &                      (h2b_2-1+(noab+nvab)*(p6b_2-1+(noab+nvab)*
     &                      (p5b_2-1)))),h3b_2,h2b_2,p6b_2,p5b_2)
      end if 
      
      IF ((t_p4b.eq.p4b).and.(t_p5b.eq.p5b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h1b).and.(t_h2b.eq.h2b).and.(t_h3b.eq.h3b)) THEN
      call sd_t_s1_1(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p4b).and.(t_p5b.eq.p5b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h1b).and.(t_h3b.eq.h3b)) THEN
      call sd_t_s1_2(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p4b).and.(t_p5b.eq.p5b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h3b).and.(t_h3b.eq.h1b)) THEN
      call sd_t_s1_3(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p4b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h1b).and.(t_h2b.eq.h2b).and.(t_h3b.eq.h3b)) THEN
      call sd_t_s1_4(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p4b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h1b).and.(t_h3b.eq.h3b)) THEN
      call sd_t_s1_5(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p4b).and.(t_p6b.eq.p6b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h3b).and.(t_h3b.eq.h1b)) THEN
      call sd_t_s1_6(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p6b).and.(t_p6b.eq.p4b)
     &.and.(t_h1b.eq.h1b).and.(t_h2b.eq.h2b).and.(t_h3b.eq.h3b)) THEN
      call sd_t_s1_7(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p6b).and.(t_p6b.eq.p4b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h1b).and.(t_h3b.eq.h3b)) THEN
      call sd_t_s1_8(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

      END IF
      IF ((t_p4b.eq.p5b).and.(t_p5b.eq.p6b).and.(t_p6b.eq.p4b)
     &.and.(t_h1b.eq.h2b).and.(t_h2b.eq.h3b).and.(t_h3b.eq.h1b)) THEN
      call sd_t_s1_9(int_mb(k_range+h3b-1),int_mb(k_range+h2b-1),
     1               int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),
     2               int_mb(k_range+p5b-1),int_mb(k_range+p4b-1),
     4               a_c,dbl_mb(k_a_sort),dbl_mb(k_b_sort))

#endif

      END IF
      IF (.not.MA_POP_STACK(l_b_sort)) 
     &       CALL ERRQUIT('ccsd_t_singles_1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) 
     &       CALL ERRQUIT('ccsd_t_singles_1',8,MA_ERR)
c
      END IF
      END IF
      END IF
c
      END IF
      END IF
      END IF
      END IF
c
      END IF
      END DO
#if defined(TCE_OPENACC) && defined(USE_F90_ALLOCATABLE)
!$acc  exit data delete(d_t1sub(1:t1size))
!$acc& delete(d_v2sub(1:v2size))
      deallocate(d_t1sub)
      deallocate(d_v2sub)
      deallocate(d_scratch)
#endif
      RETURN
      END
      subroutine acc_ccsd_t_v2t1lgth(t1size,v2size)
      implicit none
#include "mafdecls.fh"
#include "tce.fh"
c     compute v2sub and t1sub max length
      integer t1size,v2size ! [out]
c
      integer range_p4,range_h1,ii
c
      range_p4=0
      do ii = noab+1,noab+nvab
         range_p4 = max(range_p4,int_mb(k_range+ii-1))
      enddo
      range_h1=0
      do ii = 1,noab
         range_h1 = max(range_h1,int_mb(k_range+ii-1))
      enddo
      t1size=(range_p4)*(range_h1)
      v2size=max((range_p4)*(range_h1**3),
     M     (range_p4**3)*(range_h1))
      call util_align64(t1size)
      call util_align64(v2size)
      return
      end
